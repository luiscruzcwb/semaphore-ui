---
- name: Deploy Nginx Proxy Manager via Docker Compose
  hosts: npm
  become: true
  gather_facts: false

  vars:
    npm_root: /opt/npm
    npm_env_file: "{{ npm_root }}/.env"
    npm_compose_file: "{{ npm_root }}/compose.yml"

    # Ajuste se quiser mudar portas públicas
    http_port: "80"
    https_port: "443"
    admin_port: "81"

    # Credenciais de banco (mantenha fora do compose)
    db_host: "db"
    db_port: "3306"
    db_name: "npm"
    db_user: "npm"
    db_password: "npm"             # troque em produção!
    db_root_password: "npm"        # troque em produção!

  tasks:
    - name: Garantir diretório base do NPM
      file:
        path: "{{ npm_root }}"
        state: directory
        mode: "0755"

    - name: Criar subdiretórios de dados
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ npm_root }}/data"
        - "{{ npm_root }}/letsencrypt"
        - "{{ npm_root }}/mysql"

    - name: Gravar arquivo .env (parâmetros do compose)
      copy:
        dest: "{{ npm_env_file }}"
        mode: "0640"
        content: |
          # Ports
          HTTP_PORT={{ http_port }}
          HTTPS_PORT={{ https_port }}
          ADMIN_PORT={{ admin_port }}

          # DB settings
          DB_MYSQL_HOST={{ db_host }}
          DB_MYSQL_PORT={{ db_port }}
          DB_MYSQL_NAME={{ db_name }}
          DB_MYSQL_USER={{ db_user }}
          DB_MYSQL_PASSWORD={{ db_password }}
          MYSQL_ROOT_PASSWORD={{ db_root_password }}
      notify: docker compose up

    - name: Gravar docker compose
      copy:
        dest: "{{ npm_compose_file }}"
        mode: "0644"
        content: |
          services:
            app:
              image: jc21/nginx-proxy-manager:latest
              restart: unless-stopped
              ports:
                - "${HTTP_PORT}:80"
                - "${HTTPS_PORT}:443"
                - "${ADMIN_PORT}:81"
              environment:
                DB_MYSQL_HOST: "${DB_MYSQL_HOST}"
                DB_MYSQL_PORT: "${DB_MYSQL_PORT}"
                DB_MYSQL_USER: "${DB_MYSQL_USER}"
                DB_MYSQL_PASSWORD: "${DB_MYSQL_PASSWORD}"
                DB_MYSQL_NAME: "${DB_MYSQL_NAME}"
                # DISABLE_IPV6: 'true'  # descomente se o host não tiver IPv6
              volumes:
                - ./data:/data
                - ./letsencrypt:/etc/letsencrypt
              depends_on:
                - db

            db:
              image: jc21/mariadb-aria:latest
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
                MYSQL_DATABASE: "${DB_MYSQL_NAME}"
                MYSQL_USER: "${DB_MYSQL_USER}"
                MYSQL_PASSWORD: "${DB_MYSQL_PASSWORD}"
                MARIADB_AUTO_UPGRADE: "1"
              volumes:
                - ./mysql:/var/lib/mysql
      notify: docker compose up

    - name: (Opcional) Verificar se as portas estão livres
      shell: |
        set -e
        for p in {{ http_port }} {{ https_port }} {{ admin_port }}; do
          if ss -ltn "( sport = :$p )" | grep -q ":$p"; then
            echo "PORTA_EM_USO:$p"
          fi
        done
      register: port_check
      changed_when: false

    - name: Falhar se alguma porta estiver em uso
      fail:
        msg: >-
          Porta(s) em uso: {{
            port_check.stdout_lines | select('search','^PORTA_EM_USO:') |
            map('regex_replace','^PORTA_EM_USO:','') | list | join(', ')
          }}. Ajuste http_port/https_port/admin_port.
      when: port_check.stdout is search("PORTA_EM_USO:")

    - name: Subir stack (primeira vez ou quando arquivos mudarem)
      command: docker compose --env-file "{{ npm_env_file }}" -f "{{ npm_compose_file }}" up -d
      args:
        chdir: "{{ npm_root }}"
      register: compose_up
      changed_when: "'Started' in compose_up.stdout or 'Recreating' in compose_up.stdout or 'Creating' in compose_up.stdout"
      when: false  # executado via handler

    - name: Aguardar containers subirem
      shell: |
        docker ps --format '{{"{{.Names}}"}}:{{"{{.Status}}"}}' | egrep 'npm|mariadb|db|proxy|manager' || true
      register: ps_out
      retries: 10
      delay: 3
      until: ps_out.rc == 0
      changed_when: false

    - name: Mostrar status dos containers
      debug:
        var: ps_out.stdout_lines

    - name: Exibir URL de acesso e credenciais padrão
      debug:
        msg:
          - "Acesse o painel do NPM: http://{{ hostvars[inventory_hostname].ansible_host | default(inventory_hostname) }}:{{ admin_port }}"
          - "Login padrão (altere no primeiro acesso):"
          - "  Email: admin@example.com"
          - "  Senha: changeme"

  handlers:
    - name: docker compose up
      command: docker compose --env-file "{{ npm_env_file }}" -f "{{ npm_compose_file }}" up -d
      args:
        chdir: "{{ npm_root }}"
